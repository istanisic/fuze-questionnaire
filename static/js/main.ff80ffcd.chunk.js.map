{"version":3,"sources":["logo.svg","components/Option/Option.js","components/Question/Question.js","components/QuestionList/QuestionList.js","components/NewQuestion/NewQuestion.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Option","react_default","a","createElement","className","type","id","this","props","option","name","label","value","for","React","Component","Question","_this","class","options","map","components_Option_Option","QuestionList","questions","question","components_Question_Question","NewQuestion","handleClick","e","document","getElementById","onClick","replace","split","rows","placeholder","href","aria-hidden","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","newQuestions","slice","push","setState","components_QuestionList_QuestionList","components_NewQuestion_NewQuestion","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff80ffcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Option.css';\n\nclass Option extends React.Component {\n\n  render() {\n    return (\n      <div className=\"Option\">\n        <input type=\"radio\" id={this.props.option} name={this.props.label} value={this.props.option} />\n        <label for={this.props.option}>{this.props.option}</label>\n      </div>\n    );\n  }\n}\n\nexport default Option;\n","import React from 'react';\nimport './Question.css';\nimport Option from '../Option/Option';\n\nclass Question extends React.Component {\n\n  render() {\n    return (\n      <div class=\"Question\">\n      <p>{this.props.label}</p>\n      <div className=\"Question\">\n        {\n          this.props.options.map(option => {\n            return <Option label={this.props.label} option={option} />;\n          })\n        }\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React from 'react';\nimport './QuestionList.css';\nimport Question from '../Question/Question';\n\nclass QuestionList extends React.Component {\n  render() {\n    return (\n      <div className=\"QuestionList\">\n      <h1>Questionnaire Preview</h1>\n        {\n          this.props.questions.map(question => {\n            return <Question label={question.label} options={question.options} />;\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default QuestionList;\n","import React from 'react';\nimport './NewQuestion.css';\n// import DeleteButton from '../DeleteButton/DeleteButton';\n\nclass NewQuestion extends React.Component {\n\n  handleClick = (e) => {\n    // e.preventDefault();\n    let label = document.getElementById(\"label\").value;\n    let options = document.getElementById(\"options\").value;\n    this.props.onClick(label, options.replace(/\\s*,\\s*/g, \",\").split(','));\n    document.getElementById(\"label\").value = \"\";\n    document.getElementById(\"options\").value = \"\";\n  }\n\n  render() {\n    return (\n      <div className=\"NewQuestion\">\n        <p><strong>Add a M/C question:</strong></p>\n        <textarea rows=\"2\" id=\"label\" type=\"text\" placeholder=\"What is your favourite programming language?\" />\n        <textarea rows=\"4\" id=\"options\" type=\"text\" placeholder=\"Enter your options separated by a comma. i.e Java, PHP, C, C++\" />\n        <a href=\"#\" class=\"btn btn-primary\" onClick={this.handleClick}>\n          <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n          <span><strong>Add</strong></span>\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default NewQuestion;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QuestionList from './components/QuestionList/QuestionList';\nimport NewQuestion from './components/NewQuestion/NewQuestion';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick (label, options) {\n    const newQuestions = this.state.questions.slice();\n    newQuestions.push({label: label, options: options});\n    this.setState({\n      questions: newQuestions,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <QuestionList questions={this.state.questions} />\n        <NewQuestion onClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}